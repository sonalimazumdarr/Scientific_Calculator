import tkinter as tk
from math import *

# Create the main window
root = tk.Tk()
root.title("Scientific Calculator")
root.geometry("400x600")

# Create the entry widget to display the calculations
display = tk.Entry(root, font=("Arial", 20), borderwidth=5, relief="raised", justify="right")
display.grid(row=0, column=0, columnspan=5, padx=10, pady=20, sticky="nsew")

# Function to update the display
def button_click(item):
    current = display.get()
    display.delete(0, tk.END)
    display.insert(0, current + str(item))

# Function to clear the display
def button_clear():
    display.delete(0, tk.END)

# Function to evaluate the expression
def button_equal():
    try:
        result = str(eval(display.get()))
        display.delete(0, tk.END)
        display.insert(0, result)
    except:
        display.delete(0, tk.END)
        display.insert(0, "Error")

# Function to delete the last character
def button_backspace():
    current = display.get()
    display.delete(len(current)-1, tk.END)

# Create a list of button labels
buttons = [
    '7', '8', '9', '/', 'sin',
    '4', '5', '6', '*', 'cos',
    '1', '2', '3', '-', 'tan',
    '0', '.', '(', ')', '+',
    'pi', 'e', 'sqrt', '**', 'log',
    'Clear', 'Del', '=', 'exp', 'ln'
]

# Mapping functions for specific buttons
functions = {
    'pi': lambda: button_click('pi'),
    'e': lambda: button_click('e'),
    'sin': lambda: button_click('sin('),
    'cos': lambda: button_click('cos('),
    'tan': lambda: button_click('tan('),
    'log': lambda: button_click('log10('),
    'ln': lambda: button_click('log('),
    'sqrt': lambda: button_click('sqrt('),
    'exp': lambda: button_click('exp('),
    'Clear': button_clear,
    'Del': button_backspace,
    '=': button_equal,
}

# Create buttons and place them on the grid
row, col = 1, 0
for button in buttons:
    if button in functions:
        action = functions[button]
    else:
        action = lambda b=button: button_click(b)
    
    tk.Button(root, text=button, width=5, height=2, font=("Arial", 14), 
              command=action).grid(row=row, column=col, padx=5, pady=5)
    
    col += 1
    if col > 4:
        col = 0
        row += 1

# Make the grid cells resizable
for i in range(5):
    root.grid_columnconfigure(i, weight=1)
for i in range(7):
    root.grid_rowconfigure(i, weight=1)

root.mainloop()
